// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\repository\interface\user.go

// Package mock is a generated GoMock package.
package mock

import (
	models "grpc-user-service/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), user)
}

// CheckUserAvailabilityWithUserID mocks base method.
func (m *MockUserRepository) CheckUserAvailabilityWithUserID(Id int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAvailabilityWithUserID", Id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserAvailabilityWithUserID indicates an expected call of CheckUserAvailabilityWithUserID.
func (mr *MockUserRepositoryMockRecorder) CheckUserAvailabilityWithUserID(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAvailabilityWithUserID", reflect.TypeOf((*MockUserRepository)(nil).CheckUserAvailabilityWithUserID), Id)
}

// CheckUserAvailabilityWithUserIDs mocks base method.
func (m *MockUserRepository) CheckUserAvailabilityWithUserIDs(Id []int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAvailabilityWithUserIDs", Id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserAvailabilityWithUserIDs indicates an expected call of CheckUserAvailabilityWithUserIDs.
func (mr *MockUserRepositoryMockRecorder) CheckUserAvailabilityWithUserIDs(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAvailabilityWithUserIDs", reflect.TypeOf((*MockUserRepository)(nil).CheckUserAvailabilityWithUserIDs), Id)
}

// CheckUserExistsByPhone mocks base method.
func (m *MockUserRepository) CheckUserExistsByPhone(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByPhone", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserExistsByPhone indicates an expected call of CheckUserExistsByPhone.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByPhone", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByPhone), phone)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(Id int64) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", Id)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), Id)
}

// GetUsersByIDs mocks base method.
func (m *MockUserRepository) GetUsersByIDs(Ids []int64) ([]models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByIDs", Ids)
	ret0, _ := ret[0].([]models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByIDs indicates an expected call of GetUsersByIDs.
func (mr *MockUserRepositoryMockRecorder) GetUsersByIDs(Ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIDs", reflect.TypeOf((*MockUserRepository)(nil).GetUsersByIDs), Ids)
}

// SearchCity mocks base method.
func (m *MockUserRepository) SearchCity(city string) ([]models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCity", city)
	ret0, _ := ret[0].([]models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCity indicates an expected call of SearchCity.
func (mr *MockUserRepositoryMockRecorder) SearchCity(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCity", reflect.TypeOf((*MockUserRepository)(nil).SearchCity), city)
}

// SearchMarried mocks base method.
func (m *MockUserRepository) SearchMarried(married bool) ([]models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMarried", married)
	ret0, _ := ret[0].([]models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMarried indicates an expected call of SearchMarried.
func (mr *MockUserRepositoryMockRecorder) SearchMarried(married interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMarried", reflect.TypeOf((*MockUserRepository)(nil).SearchMarried), married)
}

// SearchPhone mocks base method.
func (m *MockUserRepository) SearchPhone(phone string) ([]models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPhone", phone)
	ret0, _ := ret[0].([]models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPhone indicates an expected call of SearchPhone.
func (mr *MockUserRepositoryMockRecorder) SearchPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPhone", reflect.TypeOf((*MockUserRepository)(nil).SearchPhone), phone)
}
